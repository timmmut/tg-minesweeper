// –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const DIFFICULTY_SETTINGS = {
    easy: { rows: 9, cols: 9, mines: 10 },
    medium: { rows: 16, cols: 16, mines: 40 },
    hard: { rows: 16, cols: 30, mines: 99 }
};

// –ò–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const GAME_STATES = {
    WAITING: 'waiting',
    PLAYING: 'playing',
    GAME_OVER: 'game_over',
    WIN: 'win'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let gameState = GAME_STATES.WAITING;
let currentDifficulty = 'easy';
let board = [];
let minesCount;
let timer;
let seconds = 0;
let firstClick = true;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('game-board');
const newGameBtn = document.getElementById('new-game-btn');
const difficultyBtns = document.querySelectorAll('.difficulty-btn');
const minesCountDisplay = document.getElementById('mines-count');
const timerDisplay = document.getElementById('timer');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
    initializeGame(currentDifficulty);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    newGameBtn.addEventListener('click', function() {
        initializeGame(currentDifficulty);
    });
    
    // –ö–Ω–æ–ø–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficultyBtns.forEach(button => {
        button.addEventListener('click', function() {
            difficultyBtns.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            currentDifficulty = this.dataset.difficulty;
            initializeGame(currentDifficulty);
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
function initializeGame(difficulty) {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    stopTimer();
    seconds = 0;
    timerDisplay.textContent = '0';
    firstClick = true;
    gameState = GAME_STATES.WAITING;
    
    const settings = DIFFICULTY_SETTINGS[difficulty];
    const { rows, cols, mines } = settings;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–Ω
    minesCount = mines;
    minesCountDisplay.textContent = minesCount;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    gameBoard.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å–µ—Ç–∫–∏
    board = [];
    for (let i = 0; i < rows; i++) {
        board[i] = [];
        for (let j = 0; j < cols; j++) {
            board[i][j] = {
                isMine: false,
                isRevealed: false,
                isFlagged: false,
                neighborMines: 0,
                row: i,
                col: j
            };
        }
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    renderBoard();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
    gameBoard.innerHTML = '';
    
    for (let row = 0; row < board.length; row++) {
        for (let col = 0; col < board[row].length; col++) {
            const cell = board[row][col];
            const cellElement = document.createElement('div');
            
            cellElement.className = 'cell';
            cellElement.dataset.row = row;
            cellElement.dataset.col = col;
            
            if (cell.isRevealed) {
                cellElement.classList.add('revealed');
                
                if (cell.isMine) {
                    cellElement.classList.add('mine');
                    cellElement.textContent = 'üí£';
                } else if (cell.neighborMines > 0) {
                    cellElement.textContent = cell.neighborMines;
                    cellElement.dataset.mines = cell.neighborMines;
                }
            } else if (cell.isFlagged) {
                cellElement.classList.add('flagged');
                cellElement.textContent = 'üö©';
            }
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            let pressTimer;
            let longPressTriggered = false;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç–∏—è
            cellElement.addEventListener('mousedown', function(e) {
                if (e.button === 0) { // –¢–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                    pressTimer = setTimeout(function() {
                        longPressTriggered = true;
                        toggleFlag(row, col);
                    }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
            cellElement.addEventListener('mouseup', function(e) {
                clearTimeout(pressTimer);
                if (!longPressTriggered && e.button === 0) {
                    handleCellClick(row, col);
                }
                longPressTriggered = false;
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–ª–µ–º–µ–Ω—Ç–∞
            cellElement.addEventListener('mouseout', function() {
                clearTimeout(pressTimer);
                longPressTriggered = false;
            });
            
            // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            cellElement.addEventListener('touchstart', function(e) {
                pressTimer = setTimeout(function() {
                    longPressTriggered = true;
                    toggleFlag(row, col);
                }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã
            });
            
            cellElement.addEventListener('touchend', function(e) {
                clearTimeout(pressTimer);
                if (!longPressTriggered) {
                    handleCellClick(row, col);
                }
                longPressTriggered = false;
                e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            });
            
            cellElement.addEventListener('touchmove', function(e) {
                clearTimeout(pressTimer);
                longPressTriggered = false;
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é)
            cellElement.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                if (gameState === GAME_STATES.PLAYING || gameState === GAME_STATES.WAITING) {
                    toggleFlag(row, col);
                }
            });
            
            gameBoard.appendChild(cellElement);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
function handleCellClick(row, col) {
    const cell = board[row][col];
    
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –∏–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–≥–æ–º - –≤—ã—Ö–æ–¥–∏–º
    if (gameState === GAME_STATES.GAME_OVER || gameState === GAME_STATES.WIN || 
        cell.isRevealed || cell.isFlagged) {
        return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    if (firstClick) {
        startGame(row, col);
        return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
    revealCell(row, col);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∏ –ø–æ–±–µ–¥—ã
    if (cell.isMine) {
        gameOver();
    } else {
        checkWinCondition();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
function startGame(row, col) {
    firstClick = false;
    gameState = GAME_STATES.PLAYING;
    
    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω (–∏–∑–±–µ–≥–∞—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞)
    placeMines(row, col);
    
    // –ü–æ–¥—Å—á–µ—Ç –º–∏–Ω —É —Å–æ—Å–µ–¥–µ–π
    calculateNeighborMines();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É
    revealCell(row, col);
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–∏ –±–æ–ª—å—à–æ–π –ø—É—Å—Ç–æ–π —É—á–∞—Å—Ç–æ–∫ —Å—Ä–∞–∑—É)
    checkWinCondition();
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ
function placeMines(safeRow, safeCol) {
    const { mines } = DIFFICULTY_SETTINGS[currentDifficulty];
    const rows = board.length;
    const cols = board[0].length;
    
    let placedMines = 0;
    
    while (placedMines < mines) {
        const randomRow = Math.floor(Math.random() * rows);
        const randomCol = Math.floor(Math.random() * cols);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –∏ –Ω–µ —Å–æ—Å–µ–¥–Ω—è—è —Å –Ω–µ–π
        const isSafeArea = Math.abs(randomRow - safeRow) <= 1 && Math.abs(randomCol - safeCol) <= 1;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –∏ –∑–¥–µ—Å—å –µ—â–µ –Ω–µ—Ç –º–∏–Ω—ã
        if (!isSafeArea && !board[randomRow][randomCol].isMine) {
            board[randomRow][randomCol].isMine = true;
            placedMines++;
        }
    }
}

// –ü–æ–¥—Å—á–µ—Ç –º–∏–Ω —É —Å–æ—Å–µ–¥–µ–π
function calculateNeighborMines() {
    const rows = board.length;
    const cols = board[0].length;
    
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            if (board[row][col].isMine) continue;
            
            let count = 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö 8 —Å–æ—Å–µ–¥–µ–π
            for (let i = -1; i <= 1; i++) {
                for (let j = -1; j <= 1; j++) {
                    if (i === 0 && j === 0) continue;
                    
                    const newRow = row + i;
                    const newCol = col + j;
                    
                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
                        if (board[newRow][newCol].isMine) {
                            count++;
                        }
                    }
                }
            }
            
            board[row][col].neighborMines = count;
        }
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
function revealCell(row, col) {
    const cell = board[row][col];
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–≥–æ–º - –≤—ã—Ö–æ–¥–∏–º
    if (cell.isRevealed || cell.isFlagged) return;
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
    cell.isRevealed = true;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ
    if (cell.neighborMines === 0 && !cell.isMine) {
        const rows = board.length;
        const cols = board[0].length;
        
        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                if (i === 0 && j === 0) continue;
                
                const newRow = row + i;
                const newCol = col + j;
                
                if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
                    revealCell(newRow, newCol);
                }
            }
        }
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —è—á–µ–π–∫—É —Å –º–∏–Ω–æ–π –∏–ª–∏ —Å —Ü–∏—Ñ—Ä–æ–π
    if (window.telegramAPI && cell.isMine) {
        window.telegramAPI.vibrate('error');
    } else if (window.telegramAPI && cell.neighborMines > 0) {
        window.telegramAPI.vibrate('success');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderBoard();
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞
function toggleFlag(row, col) {
    const cell = board[row][col];
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º
    if (cell.isRevealed) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/—Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
    cell.isFlagged = !cell.isFlagged;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º–∏–Ω
    minesCount += cell.isFlagged ? -1 : 1;
    minesCountDisplay.textContent = minesCount;
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/—Å–Ω—è—Ç–∏–∏ —Ñ–ª–∞–≥–∞
    if (window.telegramAPI) {
        window.telegramAPI.vibrate('success');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderBoard();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
    checkWinCondition();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
function checkWinCondition() {
    const rows = board.length;
    const cols = board[0].length;
    const totalCells = rows * cols;
    const totalMines = DIFFICULTY_SETTINGS[currentDifficulty].mines;
    
    let revealedCount = 0;
    let correctFlagsCount = 0;
    
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const cell = board[row][col];
            
            if (cell.isRevealed && !cell.isMine) {
                revealedCount++;
            }
            
            if (cell.isFlagged && cell.isMine) {
                correctFlagsCount++;
            }
        }
    }
    
    // –ü–æ–±–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏–ª–∏ –≤—Å–µ –º–∏–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã —Ñ–ª–∞–≥–∞–º–∏
    if (revealedCount === totalCells - totalMines || correctFlagsCount === totalMines) {
        gameState = GAME_STATES.WIN;
        stopTimer();
        
        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –º–∏–Ω—ã —Ñ–ª–∞–≥–∞–º–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                if (board[row][col].isMine && !board[row][col].isFlagged) {
                    board[row][col].isFlagged = true;
                }
            }
        }
        
        renderBoard();
        setTimeout(() => alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!'), 300);
    }
}

// –ü—Ä–æ–∏–≥—Ä—ã—à - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
function gameOver() {
    gameState = GAME_STATES.GAME_OVER;
    stopTimer();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
    for (let row = 0; row < board.length; row++) {
        for (let col = 0; col < board[row].length; col++) {
            const cell = board[row][col];
            
            if (cell.isMine) {
                cell.isRevealed = true;
            }
            
            // –û—Ç–º–µ—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
            if (cell.isFlagged && !cell.isMine) {
                cell.isFlagged = false;
                cell.isRevealed = true;
            }
        }
    }
    
    renderBoard();
    setTimeout(() => alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.'), 300);
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
    if (timer) {
        stopTimer();
    }
    
    seconds = 0;
    timerDisplay.textContent = seconds;
    
    timer = setInterval(() => {
        seconds++;
        timerDisplay.textContent = seconds;
    }, 1000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function stopTimer() {
    if (timer) {
        clearInterval(timer);
        timer = null;
    }
} 